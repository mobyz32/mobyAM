<!DOCTYPE html>
<html lang="en" >
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>AM Machine Calculator</title>
  <style>
    *, *::before, *::after {
      box-sizing: border-box;
    }
    body {
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      max-width: 420px;
      margin: 48px auto;
      padding: 24px 16px 32px;
      background: #fff;
      color: #222;
      line-height: 1.4;
      user-select: none;
    }
    h2 {
      font-weight: 700;
      font-size: 1.8rem;
      text-align: center;
      margin-bottom: 1.5rem;
      color: #111;
    }
    /* Tabs container */
    .tabs {
      display: flex;
      justify-content: center;
      margin-bottom: 2rem;
      gap: 16px;
      user-select: none;
    }
    .tab {
      padding: 10px 20px;
      font-weight: 600;
      font-size: 1.1rem;
      border-radius: 24px;
      border: 2px solid transparent;
      cursor: pointer;
      color: #666;
      transition: all 0.3s ease;
      background: #f9fafb;
      min-width: 80px;
      text-align: center;
    }
    .tab:hover {
      color: #3b82f6;
    }
    .tab.active {
      color: #fff;
      background: #3b82f6;
      border-color: #3b82f6;
      box-shadow: 0 4px 10px #3b82f6bb;
      cursor: default;
    }
    section {
      margin-bottom: 2rem;
    }
    h3, .collapsible-toggle {
      font-weight: 600;
      font-size: 1.1rem;
      margin-bottom: 1rem;
      color: #444;
      border-bottom: 1px solid #ddd;
      padding-bottom: 0.25rem;
      cursor: pointer;
      user-select: none;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }
    h3 span {
      font-size: 0.85rem;
      color: #888;
      font-weight: 400;
    }
    .input-group {
      display: grid;
      grid-template-columns: repeat(2, 1fr);
      gap: 12px 16px;
    }
    label {
      display: block;
      font-weight: 500;
      font-size: 0.85rem;
      color: #666;
      margin-bottom: 4px;
    }
    input[type="number"] {
      width: 100%;
      padding: 8px 10px;
      font-size: 1rem;
      border: 1.5px solid #ccc;
      border-radius: 6px;
      transition: border-color 0.2s ease;
      background: #fafafa;
      color: #222;
      -webkit-appearance: none;
      -moz-appearance: textfield;
    }
    input[type="number"]:focus {
      outline: none;
      border-color: #3b82f6;
      background: #fff;
      box-shadow: 0 0 6px #3b82f6aa;
    }
    input[type=number]::-webkit-inner-spin-button, 
    input[type=number]::-webkit-outer-spin-button { 
      -webkit-appearance: none; 
      margin: 0; 
    }
    button {
      width: 100%;
      background: #3b82f6;
      color: #fff;
      border: none;
      padding: 14px 0;
      border-radius: 8px;
      font-weight: 600;
      font-size: 1.1rem;
      cursor: pointer;
      transition: background-color 0.25s ease;
      user-select: none;
      margin-top: 1.2rem;
      box-shadow: 0 4px 10px #3b82f6bb;
    }
    button:disabled {
      background: #a5b4fc;
      cursor: not-allowed;
      box-shadow: none;
    }
    button:not(:disabled):hover {
      background: #2563eb;
      box-shadow: 0 6px 15px #2563ebcc;
    }
    #results {
      padding: 18px 20px;
      font-size: 1.1rem;
      color: #111;
      background: #f4f6fb;
      border-radius: 8px;
      box-shadow: inset 0 0 8px #ddd;
      min-height: 68px;
      white-space: pre-wrap;
      font-family: 'Segoe UI Mono', Consolas, monospace;
      user-select: text;
      transition: opacity 0.3s ease;
    }
    #results b {
      color: #2563eb;
    }
    .collapsed .arrow {
      transform: rotate(-90deg);
    }
    .collapsible-content {
      overflow: hidden;
      max-height: 0;
      transition: max-height 0.3s ease, opacity 0.3s ease;
      pointer-events: none;
      opacity: 0;
      user-select: none;
    }
    .collapsible-content.open {
      max-height: 600px;
      opacity: 1;
      pointer-events: auto;
      user-select: auto;
    }
    .arrow {
      transition: transform 0.3s ease;
      font-size: 1.1rem;
      color: #888;
    }
  </style>
</head>
<body>

<h2>AM Machine Calculator</h2>

<div class="tabs" role="tablist" aria-label="Select machine">
  <div class="tab active" role="tab" tabindex="0" aria-selected="true" aria-controls="machine-J95" id="tab-J95">J95</div>
  <div class="tab" role="tab" tabindex="-1" aria-selected="false" aria-controls="machine-J149" id="tab-J149">J149</div>
</div>

<!-- Container for machine calculators -->
<div id="machine-J95" role="tabpanel" aria-labelledby="tab-J95">
  <!-- Laser Inputs -->
  <section aria-labelledby="lasers-header-J95">
    <h3 id="lasers-header-J95">Enter Laser Values</h3>
    <div class="input-group" id="valueInputs-J95" role="group" aria-label="Laser input fields for J95"></div>
    <button id="calcBtn-J95" type="button" onclick="calculate('J95')" disabled>Calculate</button>
  </section>
  <!-- Calibration Constants -->
  <section aria-labelledby="calibration-header-J95">
    <div class="collapsible-toggle collapsed" id="calibration-header-J95" tabindex="0" role="button" aria-expanded="false" aria-controls="constContent-J95">
      Calibration Constants <span class="arrow">▶</span>
    </div>
    <div id="constContent-J95" class="collapsible-content" role="region" aria-hidden="true">
      <div class="input-group" id="constInputs-J95" role="group" aria-label="Calibration constants input fields for J95"></div>
      <button id="saveBtn-J95" type="button" onclick="saveConstants('J95')">Save Constants</button>
    </div>
  </section>
</div>

<div id="machine-J149" role="tabpanel" aria-labelledby="tab-J149" hidden>
  <section aria-labelledby="lasers-header-J149">
    <h3 id="lasers-header-J149">Enter Laser Values</h3>
    <div class="input-group" id="valueInputs-J149" role="group" aria-label="Laser input fields for J149"></div>
    <button id="calcBtn-J149" type="button" onclick="calculate('J149')" disabled>Calculate</button>
  </section>
  <section aria-labelledby="calibration-header-J149">
    <div class="collapsible-toggle collapsed" id="calibration-header-J149" tabindex="0" role="button" aria-expanded="false" aria-controls="constContent-J149">
      Calibration Constants <span class="arrow">▶</span>
    </div>
    <div id="constContent-J149" class="collapsible-content" role="region" aria-hidden="true">
      <div class="input-group" id="constInputs-J149" role="group" aria-label="Calibration constants input fields for J149"></div>
      <button id="saveBtn-J149" type="button" onclick="saveConstants('J149')">Save Constants</button>
    </div>
  </section>
</div>

<section aria-live="polite" aria-atomic="true" aria-relevant="additions">
  <div id="results" aria-label="Calculation results"></div>
</section>

<script>
  const NUM_FIELDS = 4;

  // Creates inputs for lasers or constants with numeric keypad on mobile
  function createInputs(containerId, prefix, labelPrefix, loadSaved = false, machine = '') {
    let html = '';
    for(let i=1; i<=NUM_FIELDS; i++) {
      let savedVal = '';
      if(loadSaved && prefix === 'const') {
        savedVal = localStorage.getItem(machine + '_const' + i) || '';
      }
      html += `
        <div>
          <label for="${prefix}${i}-${machine}">${labelPrefix} ${i}</label>
          <input
            type="number"
            inputmode="numeric"
            pattern="[0-9]*"
            id="${prefix}${i}-${machine}"
            placeholder="${labelPrefix} ${i}"
            value="${savedVal}"
            min="0"
          />
        </div>`;
    }
    document.getElementById(containerId).innerHTML = html;
  }

  // Save constants to localStorage, keyed by machine
  function saveConstants(machine) {
    let valid = true;
    for(let i=1; i<=NUM_FIELDS; i++) {
      const input = document.getElementById('const' + i + '-' + machine);
      if(input.value.trim() === '' || isNaN(input.value)) {
        valid = false;
        input.style.borderColor = '#ef4444';
      } else {
        input.style.borderColor = '#ccc';
        localStorage.setItem(machine + '_const' + i, input.value);
      }
    }
    if(valid) {
      const saveBtn = document.getElementById('saveBtn-' + machine);
      saveBtn.textContent = 'Saved ✓';
      setTimeout(() => saveBtn.textContent = 'Save Constants', 1500);
      checkCalculateButton(machine);
    } else {
      alert('Please fill all constants with valid numbers.');
    }
  }

  // Enable/disable calculate button based on input validation
  function checkCalculateButton(machine) {
    let allFilled = true;
    for(let i=1; i<=NUM_FIELDS; i++) {
      const input = document.getElementById('val' + i + '-' + machine);
      if(input.value.trim() === '' || isNaN(input.value)) {
        allFilled = false;
        input.style.borderColor = '#ef4444';
      } else {
        input.style.borderColor = '#ccc';
      }
    }
    document.getElementById('calcBtn-' + machine).disabled = !allFilled;
  }

  // Calculate difference (Laser value - Calibration constant) for selected machine
  function calculate(machine) {
    let output = '';
    for(let i=1; i<=NUM_FIELDS; i++) {
      const c = parseFloat(localStorage.getItem(machine + '_const' + i) || 0);
      const v = parseFloat(document.getElementById('val' + i + '-' + machine).value);
      const diff = v - c;
      output += `${machine} Laser ${i}: <b>${diff.toFixed(2)}</b><br>\n`;
    }
    results.style.opacity = 0;
    setTimeout(() => {
      results.innerHTML = output.trim(); // Use innerHTML to render <b> tags
      results.style.opacity = 1;
    }, 150);
  }

  // Collapsible toggle for calibration constants
  function setupCollapsible(machine) {
    const toggleHeader = document.getElementById('calibration-header-' + machine);
    const collapsibleContent = document.getElementById('constContent-' + machine);
    const arrow = toggleHeader.querySelector('.arrow');

    function toggleConstants() {
      const expanded = toggleHeader.getAttribute('aria-expanded') === 'true';
      toggleHeader.setAttribute('aria-expanded', String(!expanded));
      collapsibleContent.classList.toggle('open');
      toggleHeader.classList.toggle('collapsed');
      arrow.textContent = expanded ? '▶' : '▼';
    }
    toggleHeader.addEventListener('click', toggleConstants);
    toggleHeader.addEventListener('keydown', (e) => {
      if(e.key === 'Enter' || e.key === ' ') {
        e.preventDefault();
        toggleConstants();
      }
    });
  }

  // Setup tabs switching between machines
  function setupTabs() {
    const tabs = document.querySelectorAll('.tab');
    tabs.forEach(tab => {
      tab.addEventListener('click', () => {
        activateTab(tab.id);
      });
      tab.addEventListener('keydown', e => {
        if(e.key === 'ArrowRight' || e.key === 'ArrowLeft') {
          e.preventDefault();
          let index = Array.from(tabs).indexOf(document.activeElement);
          if(e.key === 'ArrowRight') index = (index + 1) % tabs.length;
          else index = (index - 1 + tabs.length) % tabs.length;
          tabs[index].focus();
          activateTab(tabs[index].id);
        }
      });
    });
  }
  function activateTab(tabId) {
    const tabs = document.querySelectorAll('.tab');
    tabs.forEach(tab => {
      const isActive = (tab.id === tabId);
      tab.classList.toggle('active', isActive);
      tab.setAttribute('aria-selected', isActive);
      tab.setAttribute('tabindex', isActive ? '0' : '-1');
      const panelId = tab.getAttribute('aria-controls');
      const panel = document.getElementById(panelId);
      if(panel) {
        panel.hidden = !isActive;
      }
    });
    currentMachine = tabId.replace('tab-', '');
    // Reset results when switching machines
    results.textContent = '';
  }

  // Initialize inputs, event listeners, collapsibles, tabs
  function init() {
    ['J95', 'J149'].forEach(machine => {
      createInputs('constInputs-' + machine, 'const', 'Calibration Constant', true, machine);
      createInputs('valueInputs-' + machine, 'val', 'Laser', false, machine);

      for(let i=1; i<=NUM_FIELDS; i++) {
        document.getElementById('val' + i + '-' + machine).addEventListener('input', () => checkCalculateButton(machine));
      }

      checkCalculateButton(machine);
      setupCollapsible(machine);
    });

    setupTabs();
  }

  let currentMachine = 'J95';

  const results = document.getElementById('results');

  init();
</script>

</body>
</html>
